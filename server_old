from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
from SocketServer import ThreadingMixIn
import threading
import re
import cgi
import sqlite3
import os
#db_filename = 'todo.db'
#schema_filename = 'message_schema.sql'
topics = ['sports', 'politics', 'religion']
#insert_topic = 'insert into topics (name) values ("%s");'
#insert_message = 'insert into messages (msg_id, data, listeners, topic_id) values ("%s","%s", %d, %d);'
#insert_subscriber = 'insert into subscriber  (name, topic_id, msg_id) values ("%s", %d, "%s");'
#find_topic = 'select topic_id from topics where name=("%s");'

class Database():
    def __init__(self):
        if os.path.exists(db_filename):
            os.remove(db_filename)
        self.conn = sqlite3.connect(db_filename)
        print 'Creating schema'
        with open(schema_filename, 'rt') as f:
            schema = f.read()
        self.conn.executescript(schema)
        for t in topics:
            self._inserttopic(t)
        for t in topics:
            self._findtopic(t)
        self._insertmessage("random uuid","hello",1, 1)
    
    def _insertSubscirber(self, name, topic_id, msg_id) 
         
    
    def _inserttopic(self, t):
        query = insert_topic % t
        print query
        self.conn.execute(query)
    
    def _findtopic(self, t):
        query = find_topic % t
        print query
        for topic_id in self.conn.execute(query):
            print topic_id 
    def _insertmessage(self, uuid, mesg, subscribers, topic_id):
        query = insert_message % (uuid, mesg, subscribers, topic_id)
        print query 
        self.conn.execute(query)
    
    def publish(self, topic, msg):
        # check for topic
        # create a new message and insert into table with text
        pass
    
    def subscribe(self, topic):
        # check for topic
        # create a subscirber and insert into the table
        # 
        pass
    def retrieve(self):
        # check for topic
        # check for subscription
        # get the latest message 
        # update the message table
        pass

class LocalData(object):
    records = {}
 
class HTTPRequestHandler(BaseHTTPRequestHandler):
 
    def do_POST(self):
        
        #if None != re.search('/api/v1/addrecord/*', self.path):
        #    #ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
        #    recordID = self.path.split('/')[-1]
        #    if(recordId is ""):
        #        data = {}
        #       self.send_response(200)
        #        self.end_headers()
        #    else:
        #        LocalData.records[recordID] = data
        #        print "record %s is added successfully" % recordID
        #else:
        #    self.send_response(403)
        #    self.send_header('Content-Type', 'text/plain')
        #    self.end_headers()
        print self.path 
        self.send_response(200)
        self.end_headers()
        return

    def do_GET(self):
       # if None != re.search('/api/v1/getrecord/*', self.path):
       #     recordID = self.path.split('/')[-1]
       #     if LocalData.records.has_key(recordID):
       #         self.send_response(200)
       #         self.send_header('Content-Type', 'text/plain')
       #         self.end_headers()
       #         self.wfile.write(LocalData.records[recordID])
       #     else:
       #         self.send_response(400, 'Bad Request: record does not exist')
       #         self.send_header('Content-Type', 'application/json')
       #         self.end_headers()
       # else:
       #     self.send_response(403)
       #     self.send_header('Content-Type', 'application/json')
       #     self.end_headers()

        print self.path 
        return
    
    def do_PUT(self):
        print self.path 
        return
    
    def do_DELETE(self):
        print self.path 
        return

 
class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    allow_reuse_address = True
 
    def shutdown(self):
        self.socket.close()
        HTTPServer.shutdown(self)
 
class SimpleHttpServer():
    def __init__(self, ip, port):
        self.server = ThreadedHTTPServer((ip,port), HTTPRequestHandler)
 
    def start(self):
        self.server_thread = threading.Thread(target=self.server.serve_forever)
        self.server_thread.daemon = False
        self.server_thread.start()
 
    def waitForThread(self):
        self.server_thread.join()
 
    def addRecord(self, recordID, jsonEncodedRecord):
        LocalData.records[recordID] = jsonEncodedRecord
 
    def stop(self):
        self.server.shutdown()
        self.waitForThread()
 
if __name__=='__main__':
    #parser = argparse.ArgumentParser(description='HTTP Server')
    #parser.add_argument('port', type=int, help='Listening port for HTTP Server')
    #parser.add_argument('ip', help='HTTP Server IP')
    #args = parser.parse_args()
 
    #server = SimpleHttpServer(args.ip, args.port)
    server = SimpleHttpServer("127.0.0.1", 8080)
    print 'HTTP Server Running...........'
    db = Database()
    server.start()
    server.waitForThread()
 
